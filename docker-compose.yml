services:

  localhost:
    image: alpine:latest
    command: sleep infinity
    ports:
      - "8080:8080" # Keycloak port
      - ${frontMSPort}:${frontMSPort}
      - ${eurekaMSPort}:${eurekaMSPort}
      - ${gatewayMSPort}:${gatewayMSPort}
      - ${patientMSPort}:${patientMSPort}
      - ${notesMSPort}:${notesMSPort}
      - ${riskMSPort}:${riskMSPort}
      - "3306:3306"
      - "27017:27017"

  keycloakweb:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloakweb
    environment:
      KEYCLOAK_HOSTNAME_PORT: 8080
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_HOSTNAME_URL: http://localhost:8080
      KEYCLOAK_HOSTNAME_ADMIN_URL: http://localhost:8080
      KEYCLOAK_HOSTNAME_STRICT_BACKCHANNEL: true
      KEYCLOAK_HTTP_RELATIVE_PATH: /
      KEYCLOAK_HTTP_ENABLED: true
    command:
      - start-dev
      - --http-port=8080
      - --import-realm
    volumes:
      - ./data/import/realm-export.json:/opt/keycloak/data/import/realm-export.json
    network_mode: "service:localhost"

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_DATABASE: patientnotes
      MONGO_INITDB_ROOT_USERNAME: mdc
      MONGO_INITDB_ROOT_PASSWORD: mdcmdcA.1
    volumes:
      - ./data/mongodb_data:/data/db
      - ./data/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    network_mode: "service:localhost"

  mysqldb:
    image: "mysql:8.0"
    volumes:
      - ./data/mysqldb_data:/var/lib/mysql
      - ./data/docker-entrypoint-initdb.d/Patient.sql:/docker-entrypoint-initdb.d/Patient.sql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootrootA.1
      MYSQL_DATABASE: patient
    network_mode: "service:localhost"

  eureka-server:
    build:
      context: ./eureka-server/
      dockerfile: Dockerfile
    container_name: eureka-server
    restart: on-failure
    environment:
      - eurekaMSPort=${eurekaMSPort}
    network_mode: "service:localhost"

  gateway:
    build:
      context: ./gateway/
      dockerfile: Dockerfile
    container_name: gateway
    restart: on-failure
    environment:
      - eurekaMSPort=${eurekaMSPort}
      - gatewayMSPort=${gatewayMSPort}
      - patientMSPort=${patientMSPort}
      - riskMSPort=${riskMSPort}
      - notesMSPort=${notesMSPort}
    network_mode: "service:localhost"
    depends_on:
      - eureka-server
      - front
      - patient
      - notes
      - risk

  front:
    build:
      context: ./front-ms/
      dockerfile: Dockerfile
    container_name: front
    restart: on-failure
    network_mode: "service:localhost"
    environment:
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://localhost:8080/realms/microdiag-app/protocol/openid-connect/certs
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://localhost:8080/realms/microdiag-app
      - eurekaMSPort=${eurekaMSPort}
      - gatewayMSPort=${gatewayMSPort}
      - frontMSPort=${frontMSPort}
    depends_on:
      - eureka-server
      - keycloakweb
      - mysqldb

  patient:
    build:
      context: ./patient-ms/
      dockerfile: Dockerfile
    container_name: patient
    restart: on-failure
    network_mode: "service:localhost"
    environment:
      - spring.datasource.url=jdbc:mysql://localhost:3306/patient?allowPublicKeyRetrieval=true
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://localhost:8080/realms/microdiag-app/protocol/openid-connect/certs
      - eurekaMSPort=${eurekaMSPort}
      - patientMSPort=${patientMSPort}
    depends_on:
      - eureka-server
      - keycloakweb

  notes:
    build:
      context: ./notes-ms/
      dockerfile: Dockerfile
    container_name: notes
    restart: on-failure
    network_mode: "service:localhost"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mdc:mdcmdcA.1@localhost:27017/patientnotes?authSource=admin
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://localhost:8080/realms/microdiag-app/protocol/openid-connect/certs
      - eurekaMSPort=${eurekaMSPort}
      - notesMSPort=${notesMSPort}
    depends_on:
      - eureka-server
      - keycloakweb
      - mongodb

  risk:
    build:
      context: ./risk-ms/
      dockerfile: Dockerfile
    container_name: risk
    restart: on-failure
    network_mode: "service:localhost"
    environment:
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://localhost:8080/realms/microdiag-app/protocol/openid-connect/certs
      - eurekaMSPort=${eurekaMSPort}
      - gatewayMSPort=${gatewayMSPort}
      - riskMSPort=${riskMSPort}
    depends_on:
      - eureka-server
      - keycloakweb
